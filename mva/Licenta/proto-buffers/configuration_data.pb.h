// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration_data.proto

#ifndef PROTOBUF_configuration_5fdata_2eproto__INCLUDED
#define PROTOBUF_configuration_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_configuration_5fdata_2eproto();
void protobuf_AssignDesc_configuration_5fdata_2eproto();
void protobuf_ShutdownFile_configuration_5fdata_2eproto();

class AboutData;

// ===================================================================

class AboutData : public ::google::protobuf::MessageLite {
 public:
  AboutData();
  virtual ~AboutData();

  AboutData(const AboutData& from);

  inline AboutData& operator=(const AboutData& from) {
    CopyFrom(from);
    return *this;
  }

  static const AboutData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AboutData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AboutData* other);

  // implements Message ----------------------------------------------

  AboutData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AboutData& from);
  void MergeFrom(const AboutData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes applicationName = 1;
  inline bool has_applicationname() const;
  inline void clear_applicationname();
  static const int kApplicationNameFieldNumber = 1;
  inline const ::std::string& applicationname() const;
  inline void set_applicationname(const ::std::string& value);
  inline void set_applicationname(const char* value);
  inline void set_applicationname(const void* value, size_t size);
  inline ::std::string* mutable_applicationname();
  inline ::std::string* release_applicationname();
  inline void set_allocated_applicationname(::std::string* applicationname);

  // required bytes companyName = 2;
  inline bool has_companyname() const;
  inline void clear_companyname();
  static const int kCompanyNameFieldNumber = 2;
  inline const ::std::string& companyname() const;
  inline void set_companyname(const ::std::string& value);
  inline void set_companyname(const char* value);
  inline void set_companyname(const void* value, size_t size);
  inline ::std::string* mutable_companyname();
  inline ::std::string* release_companyname();
  inline void set_allocated_companyname(::std::string* companyname);

  // required bytes author = 3;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 3;
  inline const ::std::string& author() const;
  inline void set_author(const ::std::string& value);
  inline void set_author(const char* value);
  inline void set_author(const void* value, size_t size);
  inline ::std::string* mutable_author();
  inline ::std::string* release_author();
  inline void set_allocated_author(::std::string* author);

  // required bytes os = 4;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 4;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const void* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // required bytes platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const void* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // required bytes version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:AboutData)
 private:
  inline void set_has_applicationname();
  inline void clear_has_applicationname();
  inline void set_has_companyname();
  inline void clear_has_companyname();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_version();
  inline void clear_has_version();

  ::std::string* applicationname_;
  ::std::string* companyname_;
  ::std::string* author_;
  ::std::string* os_;
  ::std::string* platform_;
  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_configuration_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_configuration_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_configuration_5fdata_2eproto();
  friend void protobuf_ShutdownFile_configuration_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AboutData* default_instance_;
};
// ===================================================================


// ===================================================================

// AboutData

// required bytes applicationName = 1;
inline bool AboutData::has_applicationname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AboutData::set_has_applicationname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AboutData::clear_has_applicationname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AboutData::clear_applicationname() {
  if (applicationname_ != &::google::protobuf::internal::kEmptyString) {
    applicationname_->clear();
  }
  clear_has_applicationname();
}
inline const ::std::string& AboutData::applicationname() const {
  return *applicationname_;
}
inline void AboutData::set_applicationname(const ::std::string& value) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::kEmptyString) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(value);
}
inline void AboutData::set_applicationname(const char* value) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::kEmptyString) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(value);
}
inline void AboutData::set_applicationname(const void* value, size_t size) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::kEmptyString) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AboutData::mutable_applicationname() {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::kEmptyString) {
    applicationname_ = new ::std::string;
  }
  return applicationname_;
}
inline ::std::string* AboutData::release_applicationname() {
  clear_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applicationname_;
    applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AboutData::set_allocated_applicationname(::std::string* applicationname) {
  if (applicationname_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationname_;
  }
  if (applicationname) {
    set_has_applicationname();
    applicationname_ = applicationname;
  } else {
    clear_has_applicationname();
    applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes companyName = 2;
inline bool AboutData::has_companyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AboutData::set_has_companyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AboutData::clear_has_companyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AboutData::clear_companyname() {
  if (companyname_ != &::google::protobuf::internal::kEmptyString) {
    companyname_->clear();
  }
  clear_has_companyname();
}
inline const ::std::string& AboutData::companyname() const {
  return *companyname_;
}
inline void AboutData::set_companyname(const ::std::string& value) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(value);
}
inline void AboutData::set_companyname(const char* value) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(value);
}
inline void AboutData::set_companyname(const void* value, size_t size) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AboutData::mutable_companyname() {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  return companyname_;
}
inline ::std::string* AboutData::release_companyname() {
  clear_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = companyname_;
    companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AboutData::set_allocated_companyname(::std::string* companyname) {
  if (companyname_ != &::google::protobuf::internal::kEmptyString) {
    delete companyname_;
  }
  if (companyname) {
    set_has_companyname();
    companyname_ = companyname;
  } else {
    clear_has_companyname();
    companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes author = 3;
inline bool AboutData::has_author() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AboutData::set_has_author() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AboutData::clear_has_author() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AboutData::clear_author() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    author_->clear();
  }
  clear_has_author();
}
inline const ::std::string& AboutData::author() const {
  return *author_;
}
inline void AboutData::set_author(const ::std::string& value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void AboutData::set_author(const char* value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void AboutData::set_author(const void* value, size_t size) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AboutData::mutable_author() {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  return author_;
}
inline ::std::string* AboutData::release_author() {
  clear_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = author_;
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AboutData::set_allocated_author(::std::string* author) {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (author) {
    set_has_author();
    author_ = author;
  } else {
    clear_has_author();
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes os = 4;
inline bool AboutData::has_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AboutData::set_has_os() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AboutData::clear_has_os() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AboutData::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& AboutData::os() const {
  return *os_;
}
inline void AboutData::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void AboutData::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void AboutData::set_os(const void* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AboutData::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* AboutData::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AboutData::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes platform = 5;
inline bool AboutData::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AboutData::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AboutData::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AboutData::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& AboutData::platform() const {
  return *platform_;
}
inline void AboutData::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void AboutData::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void AboutData::set_platform(const void* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AboutData::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* AboutData::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AboutData::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes version = 6;
inline bool AboutData::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AboutData::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AboutData::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AboutData::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AboutData::version() const {
  return *version_;
}
inline void AboutData::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AboutData::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AboutData::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AboutData::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* AboutData::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AboutData::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_configuration_5fdata_2eproto__INCLUDED
