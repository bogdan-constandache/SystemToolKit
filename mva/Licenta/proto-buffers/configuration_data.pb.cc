// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configuration_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_configuration_5fdata_2eproto() {
  delete AboutData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_configuration_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_configuration_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AboutData::default_instance_ = new AboutData();
  AboutData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configuration_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_configuration_5fdata_2eproto_once_);
void protobuf_AddDesc_configuration_5fdata_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_configuration_5fdata_2eproto_once_,
                 &protobuf_AddDesc_configuration_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configuration_5fdata_2eproto {
  StaticDescriptorInitializer_configuration_5fdata_2eproto() {
    protobuf_AddDesc_configuration_5fdata_2eproto();
  }
} static_descriptor_initializer_configuration_5fdata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AboutData::kApplicationNameFieldNumber;
const int AboutData::kCompanyNameFieldNumber;
const int AboutData::kAuthorFieldNumber;
const int AboutData::kOsFieldNumber;
const int AboutData::kPlatformFieldNumber;
const int AboutData::kVersionFieldNumber;
#endif  // !_MSC_VER

AboutData::AboutData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AboutData::InitAsDefaultInstance() {
}

AboutData::AboutData(const AboutData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AboutData::SharedCtor() {
  _cached_size_ = 0;
  applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AboutData::~AboutData() {
  SharedDtor();
}

void AboutData::SharedDtor() {
  if (applicationname_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationname_;
  }
  if (companyname_ != &::google::protobuf::internal::kEmptyString) {
    delete companyname_;
  }
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AboutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AboutData& AboutData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_configuration_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_5fdata_2eproto();
#endif
  return *default_instance_;
}

AboutData* AboutData::default_instance_ = NULL;

AboutData* AboutData::New() const {
  return new AboutData;
}

void AboutData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applicationname()) {
      if (applicationname_ != &::google::protobuf::internal::kEmptyString) {
        applicationname_->clear();
      }
    }
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::kEmptyString) {
        companyname_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::kEmptyString) {
        author_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AboutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes applicationName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_applicationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_companyName;
        break;
      }

      // required bytes companyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_companyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_author;
        break;
      }

      // required bytes author = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_os;
        break;
      }

      // required bytes os = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }

      // required bytes platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // required bytes version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AboutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes applicationName = 1;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->applicationname(), output);
  }

  // required bytes companyName = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->companyname(), output);
  }

  // required bytes author = 3;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->author(), output);
  }

  // required bytes os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->os(), output);
  }

  // required bytes platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->platform(), output);
  }

  // required bytes version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->version(), output);
  }

}

int AboutData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes applicationName = 1;
    if (has_applicationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->applicationname());
    }

    // required bytes companyName = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyname());
    }

    // required bytes author = 3;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->author());
    }

    // required bytes os = 4;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os());
    }

    // required bytes platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform());
    }

    // required bytes version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AboutData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AboutData*>(&from));
}

void AboutData::MergeFrom(const AboutData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applicationname()) {
      set_applicationname(from.applicationname());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void AboutData::CopyFrom(const AboutData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AboutData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AboutData::Swap(AboutData* other) {
  if (other != this) {
    std::swap(applicationname_, other->applicationname_);
    std::swap(companyname_, other->companyname_);
    std::swap(author_, other->author_);
    std::swap(os_, other->os_);
    std::swap(platform_, other->platform_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AboutData::GetTypeName() const {
  return "AboutData";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
